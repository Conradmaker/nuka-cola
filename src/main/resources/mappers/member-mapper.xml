<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">
	<resultMap id="memberResultSet" type="Member">
		<result column="user_no" property="userNo"/>
		<result column="login_type" property="loginType"/>
		<result column="user_email" property="email"/>
		<result column="user_pwd" property="userPwd"/>
		<result column="user_name" property="userName"/>
		<result column="user_birth" property="userBirth"/>
		<result column="user_posi" property="userPosi"/>
		<result column="user_status" property="status"/>
		<result column="user_info" property="userInfo"/>
		<result column="user_edu" property="userEdu"/>
		<result column="user_avatar" property="userAvatar"/>
		<result column="created_at" property="createdAt"/>
		<result column="updated_at" property="updatedAt"/>
		<result column="access_token" property="accessToken"/>
		<result column="certify_ques" property="certifyQues"/>
		<result column="certify_ans" property="certifyAns"/>
		<result column="email_auth" property="emailAuth"/>
		<result column="user_comp" property="userComp"/>
		<result column="comp_no" property="compNo"/>
		<result column="comp_name" property="compName"/>
	</resultMap>
	
	<resultMap id="skillResultSet" type="Skills">
		<result column="skill_no" property="skillNo"/>
		<result column="skill_name" property="skillName"/>
	</resultMap>
	<resultMap id="userFiledSet" type="UserFiled">
		<result column="user_no" property="userNo"/>
		<result column="skill_no" property="skillNo"/>
	</resultMap>
	<resultMap id="bookmarkResultSet" type="Bookmark">
		<result column="user_no" property="userNo"/>
		<result column="recruit_no" property="recruitNo"/>
		<result column="recruit_title" property="recruitTitle"/>
		<result column="recruit_requ" property="recruitRequ"/>
		<result column="comp_name" property="compName"/>
		<result column="created_at" property="createdAt"/>
		<result column="skill_name" property="skillName"/>
	</resultMap>
	<resultMap id="ComSubResultSet" type="CompSub">
		<result column="user_no" property="userNo"/>
		<result column="comp_no" property="compNo"/>
		<result column="comp_name" property="compName"/>
		<result column="comp_info" property="compInfo"/>
		<result column="comp_logo" property="compLogo"/>
		<result column="comp_birth" property="compBirth"/>
		<result column="comp_headcount" property="compHeadcount"/>
		<result column="created_at" property="createdAt"/>
	</resultMap>
	
	<resultMap id="CareerResultSet" type="Career">
		<result column="user_no" property="userNo"/>
		<result column="comp_no" property="compNo"/>
		<result column="career_posi" property="careerPosi"/>
		<result column="career_state" property="careerState"/>
		<result column="updated_at" property="updatedAt"/>
		<result column="entered_at" property="enteredAt"/>
		<result column="created_at" property="createdAt"/>
		<result column="comp_name" property="compName"/>
	</resultMap>

	
	<resultMap id="chatResultSet" type="Chatrooms">
	
		<result column="chatroom_no" property="chatroomNo"></result>
		<result column="user_two" property="userTwo"></result>
		<result column="user_name" property="userName"></result>
		<result column="user_avatar" property="userAvatar"></result>
		<result column="message_content" property="messageContent"></result>
		<result column="created_at" property="createdAt"></result>
		<result column="mcreated_at" property="messageCreate"></result>
		
	</resultMap>
	 <resultMap id="postResultSet" type="Post">
        <result column="post_no" property="postNo"/>
        <result column="post_content" property="postContent"/>
        <result column="post_img" property="postImg"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
        <result column="user_no" property="userNo"/>
        <result column="user_name" property="userName"/>
        <result column="user_posi" property="userPosi"/>
        <result column="user_comp" property="userComp"/>
        <result column="user_avatar" property="userAvatar"/>
        <result column="ISFOLLOWING" property="isFollowing"/>
        <result column="ISLIKED" property="isLiked"/>
		 <result column="comp_name" property="compName"/>
	 </resultMap>

	
	
	<select id="loginMember"
		    parameterType="Member"
		    resultMap="memberResultSet">
		select
			   u.user_no
			 , login_type
			 , user_email
			 , user_pwd
			 , user_name
			 , user_birth
			 , user_posi
			 , user_status
			 , user_info
			 , user_edu
			 , user_avatar
			 , u.created_at
			 , u.updated_at
			 , access_token
			 , certify_ques
			 , certify_ans
			 , email_auth
			 , user_comp
			 , comp_name
             , comp_no
          from users u
          left join companys c on(u.user_no = c.user_no)  
          where user_status != 1
          and user_email=#{email}
	</select>
	
	<insert id="insertMember"
			parameterType="Member">
		insert
			into users
			(
			   user_no
			 , login_type
			 , user_email
			 , user_pwd
			 , user_name
			 , user_birth
			 , user_posi
			 , user_status
			 , user_info
			 , user_edu
			 , user_avatar
			 , created_at
			 , updated_at
			 , access_token
			 , certify_ques
			 , certify_ans
			 , email_auth
			)
			values
			(
			   seq_user.nextval
			 , default <!-- local -->  
			 , #{email}
			 , #{userPwd}
			 , #{userName}
			 , #{userBirth}
			 , #{userPosi}
			 , #{status}
			 , #{userInfo}
			 , #{userEdu}
			 , #{userAvatar}
			 , sysdate
			 , sysdate
			 , #{accessToken}
			 , #{certifyQues}
			 , #{certifyAns}
			 , default
			)
	</insert>
	
	<!-- 이메일 인증용 키 세팅 -->
	<update id="setAuthKey" parameterType="Member">
		update users
		    set
		     email_auth = #{emailAuth}
		    where user_email=#{email}
		     and user_name=#{userName} <!-- 추후 userName이 아니라 userNo로 바꿔줘야 안정적 -->
	</update>
	
	<!-- 이메일 인증링크 클릭 시 인증여부 Y로 업데이트 -->
	<update id="confirmEmail" parameterType="Member">
		update users
			set
			 email_auth = 'Y'
			where user_email=#{email}
			 and email_auth=#{emailAuth}
	</update>
	
	<!-- 이메일 중복체크. 중복된 이메일 카운트 -->
	<select id="checkEmail" 
			parameterType="String"
			resultType="String">
		select
			  count(*)
		 from users
		 where user_email=#{email}
		   and login_type='local'
		   and user_status in(0,2)
	</select>
	<select id="countBookmark" parameterType="_int" resultType="_int">
	select count(*)
    from bookmarks
    where user_no=#{uno}
	</select>
	
	<!-- 북마크리스트 조회 -->
	<select id="selectBookmark" parameterType="_int" resultMap="bookmarkResultSet">
		select 
		b.user_no,
		recruit_no,
		to_char(r.created_at, 'YYYY-MM-DD') "created_at",
		r.recruit_title,
		r.recruit_requ,
		c.comp_name
		from bookmarks b
		left join recruits r using(recruit_no)
		left join companys c on(r.comp_no = c.comp_no)
		where b.user_no=#{uno}
		order by b.created_at
		
	</select>
	

	
	<update id="updateUserInfo" parameterType="Member">
		
		update
				users
		set user_info = #{userInfo}
		where user_no = #{userNo}

	</update>
	
	<update id="updateUserPosi" parameterType="Member">
		
		update
				users
		set user_posi = #{userPosi}
		where user_no = #{userNo}

	</update>
	
	
	<select id="checkSkill" parameterType="string" resultMap="skillResultSet">
	
		select
			   skill_no
			 , skill_name
		from skills
		where skill_name like '%' || #{skillName} || '%'
	
	
	</select>
	
	<!-- 최종학력 조회 -->
	
	<select id="selectUserEdu" parameterType="_int"
			resultType="string">
		
		select
			   user_edu
		  from users
		 where user_no = #{userNo}
	</select>
	
	<!-- 최종학력 업데이트 -->
	<update id="updateUserEdu" parameterType="Member">
	
		update 
			   users
		   set user_edu = #{userEdu}
		 where user_no = #{userNo}
	</update>

	<select id="getSkillNo" parameterType="map" resultMap ="skillResultSet">
		
		
		select
			    skill_no
			  , skill_name
		from skills		  
		where skill_name in
		<foreach collection="array" item="arr" open="(" close=")" separator=",">
			#{arr}
		</foreach>

	</select>
	
	<update id="insertUserFiled">
			<!-- collection = 반복문 돌릴 list의 이름 item : list안에서 순차적으로 접근할 값 변수명-->
		 <foreach collection="skillsNo" item="no" open="insert all" close="SELECT * FROM DUAL">
			
			into user_fields
			(
				 user_no
			   , skill_no
			)
			values
			(
				 #{userNo}
				,#{no}
			)
			
		</foreach>
	
	
	</update>
	
	
	
	<select id="selectUserProfile" parameterType="_int" resultMap ="memberResultSet">
		
		select
			   user_no
			 , login_type
			 , user_email
			 , user_pwd
			 , user_name
			 , user_birth
			 , user_posi
			 , user_status
			 , user_info
			 , user_edu
			 , user_avatar
			 , user_comp
	      from users
	     where user_status != 1
         and user_no = #{userNo}
	

	</select>
	
	
		<select id="selectUserSkill" parameterType="_int" resultMap ="skillResultSet">
			
						select
							  skill_no
				             ,skill_name
					      from user_fields
				          join skills using(skill_no)
					     where user_no = #{userNo}


		</select>
		
		
		<delete id="deleteUserField" parameterType="UserFiled">
			delete
		  			
		  	   from user_fields
		      where user_no = #{userNo}
		        and skill_no = #{skillNo}
		
		</delete>
	
	<!-- 프로필 인맥(팔로워, 팔로잉, 연결) 조회용 -->
	<!-- 팔로워(나를팔로우하는사람) -->
	<select id="selectFollowers"
			parameterType="_int"
			resultMap="memberResultSet">
			select *
				from users
				where user_no in(
					select follower_no
					from connections
					where following_no=#{userNo}
				)
				order by user_name
	</select>
	<select id="countFollowers"
			parameterType="_int"
			resultType="_int">
			select count(*)
				from users
				where user_no in(
					select follower_no
					from connections
					where following_no=#{userNo}
				)
	</select>
	<!-- 팔로잉(내가팔로우하는사람) -->
	<select id="selectFollowings"
			parameterType="_int"
			resultMap="memberResultSet">
			select *
				from users
				where user_no in(
					select following_no
					from connections
					where follower_no=#{userNo}
				)
				order by user_name
	</select>
	<select id="countFollowings"
			parameterType="_int"
			resultType="_int">
			select count(*)
				from users
				where user_no in(
					select following_no
					from connections
					where follower_no=#{userNo}
				)
	</select>
	<!-- 연결된사람(서로팔로우) -->
	<select id="selectConnections"
			parameterType="_int"
			resultMap="memberResultSet">
			select *
				from users
				where user_no in( <!--나를 팔로우건사람의 유저번호-->
					select 
							follower_no
						from connections
						where following_no=#{userNo}
				) and user_no in( <!--내가 팔로우건사람의 유저번호-->
			        select 
			        		following_no
						from connections
						where follower_no=#{userNo}
			    )
			    order by user_name
	</select>
	<select id="countConnections"
			parameterType="_int"
			resultType="_int">
			select count(*)
				from users
				where user_no in( <!--나를 팔로우건사람의 유저번호-->
					select 
							follower_no
						from connections
						where following_no=#{userNo}
				) and user_no in( <!--내가 팔로우건사람의 유저번호-->
			        select 
			        		following_no
						from connections
						where follower_no=#{userNo}
			    )
	</select>
	
	<!-- 팔로잉 추가 -->
	<insert id="addFollowing"
			parameterType="Connection">
			insert 
					into connections 
					values(
						#{followerNo},
						#{followingNo},
						sysdate
					)
	</insert>
	<!-- 팔로잉 취소 -->
	<delete id="cancelFollowing"
			parameterType="Connection">
			delete
				  from connections
				  where follower_no=#{followerNo}
				  	and following_no=#{followingNo}
	</delete>
	
	<!-- 업무관련 기술조회 -->
	<select id="selectRecruitSkills" parameterType="_int" resultMap="bookmarkResultSet">
	select
          LISTAGG(SKILL_NAME,',')within group(order by skill_no) SKILL_NAME, recruit_no
          from recruit_skills
          join skills s using(SKILL_NO)
          where recruit_no in(select recruit_no
                                 from bookmarks b
                                 left join recruits r using(recruit_no)
                                 where user_no=#{uno})
          group by recruit_no
	</select>
	
	<delete id="deleteBookmark" parameterType="Bookmark">
		delete 
		from bookmarks 
		 where RECRUIT_NO=#{recruitNo} and
		 USER_NO=#{userNo}
	</delete>
	<!-- 구독기업 리스트 조회 -->
	<select id="countSubComp" parameterType="_int" resultType="_int">
	select count(*)
    from comp_sub
    where user_no=#{uno}
	</select>
	<select id="selectSubComp" parameterType="_int" resultMap="ComSubResultSet">
		select 
		cs.user_no,
		comp_no,
		comp_name,
		comp_info,
		comp_logo,
		substr(c.comp_birth,1,4) "COMP_BIRTH",
		cs.CREATED_AT,
		substr(COMP_HEADCOUNT,1,instr(COMP_HEADCOUNT,'명')-1) COMP_HEADCOUNT
		from comp_sub cs
		join companys c using(comp_no)
		where cs.user_no=#{uno}
		order by cs.created_at
	</select>
	<!-- 기업구독 취소 -->
	<delete id="deleteSubComp" parameterType="CompSub">
		delete
		from comp_sub
		where comp_no=#{compNo} and
		user_no=#{userNo}
	</delete>
	
	
	<update id="insertAvatar" parameterType="Member">
	
		update 
			   users
		   set user_avatar = #{userAvatar}
		 where user_no = #{userNo}

	</update>
	
	<!-- 경력 조회해오기 -->
	<select id="selectCareerList" parameterType="Career"
			resultMap="CareerResultSet">
		select
		        companys.comp_name
		      , careers.career_posi
		      , to_char(careers.updated_at, 'YYYY-MM-DD') "updated_at"
		      , to_char(careers.entered_at, 'YYYY-MM-DD') "entered_at"
		 from careers ,companys 
		where companys.comp_no = careers.comp_no
		  and careers.user_no = #{userNo}
			
	</select>

	
	<!-- 경력 추가하기 -->
	<insert id="insertCareer" parameterType="Career">
		
		insert 
			  into careers
			        ( 
			         select from companys 
			        ,USER_NO
			        ,CAREER_POSI
			        ,ENTERED_AT
			        ,UPDATED_AT    
			        
			        ) 
			        values
			        
			        (
			        seq_comp.nextval
			        ,#{userNo}
			        ,#{careerPosi}
			        ,#{enteredAt}
			   ,#{updatedAt}
			        )
	</insert>
	
	<!-- 회사 대표 조회 -->
	<select id="selectHead"
			parameterType="_int"
			resultMap="memberResultSet">
		select
				*
		  from users
		 where user_no=(
		 	select user_no
		 	  from companys
		 	 where comp_no=#{cno}
		 )
	</select>
	
	<!-- 회사 구성원 조회 -->
	<select id="selectMemberList"
			parameterType="_int"
			resultMap="memberResultSet">
		select
			  *
		  from users
		 where user_no in (
		 	select 
		 		  user_no
		 	  from careers
		 	 where comp_no=#{cno}
		 	   and career_state=0
		 )
	</select>
	
	<!-- 이메일/이름으로 회원찾기(회사 구성원추가/메세지 대화상대검색) -->
	<select id="searchMemberList"
			parameterType="String"
			resultMap="memberResultSet">
		select
			  *
		  from users
		 where user_email like '%'||#{keyword}||'%'
		 	or user_name like '%'||#{keyword}||'%'
	</select>
	
		
	
	<!--  구독기업 추가 -->
	<insert id="subComp">
		insert 
		  into comp_sub 
		      (
		         user_no
		       , comp_no
		      )
		      values
		      (
		         #{userNo}
		       , #{compNo}
		      )
	</insert>
	
	<delete id="cancleSubComp">
		delete
		  from comp_sub
		 where user_no = #{userNo}
		   and comp_no = #{compNo}
	</delete>
	
	<update id="updateUserComp"
			parameterType="java.util.List">
			update
				  users
				   set user_comp=#{list[0].userComp}
			 where user_no in
			<foreach collection="list" item="userInfo" separator="," open="(" close=")">
				 #{userInfo.userNo}
			</foreach>
	
	</update>
	
	<!-- 검색리스트 스킬 -->
	<select id="partnerSearchSkill" resultMap="skillResultSet">
	select skill_no,
       skill_name
	from skills
	order by skill_no
	</select>
	
	<!-- 인기프로필 조회-->
	<select id="partnerPopularProfile" resultType="_int">
	<![CDATA[
	select follower_no
		from(
		select follower_no, count(*) num
		from connections
		group by follower_no
		order by num desc)
		where rownum <=3
		]]>
	</select>
	<!-- 인기프로필정보 조회  -->
	<select id="partnerPopularInfo"  parameterType="int"  resultMap="memberResultSet">
	select *
		from users
		where user_no in #{p}

	</select>
	<!-- 파트너 검색 - 스킬리스트에 연관된 사람들 -->
	<select id="partnerSkill" parameterType="hashmap" resultType="_int">
	    select 
            user_no
                from user_fields
                <if test="skList != null">
                where 
                <foreach collection="skList" item="item" open="(" close=")" separator="or">
			 	skill_no =#{item}
				</foreach>
				</if>
                group by user_no
	</select>
	
	<!-- 연결된 사람들중에서 검색한 결과 총 명수-->
	<!-- <if test="@com.devcat.nucacola.member.model.vo.CheckEmpty@isEmpty(skList)"> -->
	<select id="partnerSearchCount1" parameterType="PartnerSearch" resultType="_int">
	 select count(*)   
			from
            (select *
				from users
				where user_no in( 
					        select 
							follower_no
						    from connections
						    where following_no=#{userNo}
				)and user_no in(
			                select 
			        		following_no
						    from connections
						    where follower_no=#{userNo}
			    ))
			    <if test="(pList!=null and !pList.equals(''))|| skList.size != 0 ||
			    		   (schoolList!=null and !schoolList.equals(''))|| (keyword!=null and !keyword.equals(''))" >
                where 
	                <if test="pList!=null">
				 	user_posi =#{pList} 	
					</if>
					<if test="skList.size != 0">
						<if test="pList!=null">
					 	or
						</if>
						<foreach collection="skList" item="item" open="(" close=")" separator="or">
					 	user_no =#{item}
						</foreach>
					</if>
					<if test="schoolList!=null and !schoolList.equals('')">
						<if test="skList.size != 0 || pList!=null">
					 	or
						</if>
				 		user_edu like '%'||#{schoolList}||'%'
				 		
					</if>
					<if test="keyword!=null and !keyword.equals('')">
					 	<if test="skList!=null || pList!=null || schoolList!=null and !schoolList.equals('')">
						 or
						</if>
				 		user_name like '%'||#{keyword}||'%'
					</if>
                </if>
               order by user_name 
	</select>
	<!-- 연결된 사람들중에서 검색한 결과-->
	<select id="partnerConnResult" parameterType="PartnerSearch" resultMap="memberResultSet">
	 select *   
			from
            (select *
				from users
				where user_no in( 
					        select 
							follower_no
						    from connections
						    where following_no=#{userNo}
				)and user_no in(
			                select 
			        		following_no
						    from connections
						    where follower_no=#{userNo}
			    ))<!-- 연결된 사람들 테이블 -->
			    <if test="(pList!=null and !pList.equals(''))|| skList!=null ||
			    		   (schoolList!=null and !schoolList.equals(''))|| (keyword!=null and !keyword.equals(''))" >
                where 
	                <if test="pList!=null">
				 	user_posi =#{pList}
					</if>
					<if test="skList.size != 0">
						<if test="pList!=null">
					 	or
						</if>
						<foreach collection="skList" item="item" open="(" close=")" separator="or">
					 	user_no =#{item}
						</foreach>
					</if>
					<if test="schoolList!=null and !schoolList.equals('')">
						<if test="skList.size != 0 || pList!=null">
					 	or
						</if>
				 		user_edu like '%'||#{schoolList}||'%'
				 		
					</if>
					<if test="keyword!=null and !keyword.equals('')">
				 		<if test="skList.size != 0 || pList!=null || schoolList!=null and !schoolList.equals('')">
						 or
						</if>
				 		user_name like '%'||#{keyword}||'%'
					</if>
                </if>
             order by user_name   
	</select>
	 <!-- 그 외 사람들  총 명수 조회 -->
	 <select id="partnerSearchCount2" parameterType="PartnerSearch" resultType="_int">
		select count(*)
		from(select *
			from users
			where user_no not in
			        (select user_no
							from users
							where user_no in( 
								select 
										follower_no
									from connections
									where following_no=#{userNo}
							)and user_no in(
						        select 
						        		following_no
									from connections
									where follower_no=#{userNo}
						    ))) <!-- 연결이 되지 않은 사람들 테이블 -->
				<if test="(pList!=null and !pList.equals(''))|| skList.size != 0 ||
			    		   (schoolList!=null and !schoolList.equals(''))|| (keyword!=null and !keyword.equals(''))" >
                    where 
	                <if test="pList!=null">
				 	 user_posi =#{pList}
					</if>
					<if test="skList.size != 0">
						<if test="pList!=null">
					 	or
						</if>
						<foreach collection="skList" item="item" open="(" close=")" separator="or">
					 	 user_no =#{item}
						</foreach>
					</if>
					<if test="schoolList!=null and !schoolList.equals('')">
						<if test="skList.size != 0 || pList!=null">
					 	or
						</if>
				 		user_edu like '%' || #{schoolList} || '%'
				 		
					</if>
					<if test="keyword!=null and !keyword.equals('')">
				 		<if test="skList.size != 0 || pList!=null || schoolList!=null and !schoolList.equals('')">
						 or
						</if>
				 		user_name like '%' || #{keyword} || '%'
					</if>
                </if>
                order by user_name
	 	</select>
	 	
	 	<select id="partnerETCResult" parameterType="PartnerSearch" resultMap="memberResultSet">
		select *
		from(select *
			from users
			where user_no not in
			        (select user_no
							from users
							where user_no in( 
								select 
										follower_no
									from connections
									where following_no=#{userNo}
							)and user_no in(
						        select 
						        		following_no
									from connections
									where follower_no=#{userNo}
						    ))) <!-- 연결이 되지 않은 사람들 테이블 -->
				<if test="(pList!=null and !pList.equals(''))|| skList.size != 0 ||
			    		   (schoolList!=null and !schoolList.equals(''))|| (keyword!=null and !keyword.equals(''))" >
                    where 
	                <if test="pList!=null">
				 	 user_posi =#{pList}
					</if>
					<if test="skList.size != 0">
						<if test="pList!=null">
					 	or
						</if>
						<foreach collection="skList" item="item" open="(" close=")" separator="or">
					 	 user_no =#{item}
						</foreach>
					</if>
					<if test="schoolList!=null and !schoolList.equals('')">
						<if test="skList.size != 0 || pList!=null">
					 	or
						</if>
				 		user_edu like '%'||#{schoolList}||'%'
				 		
					</if>
					<if test="keyword!=null and !keyword.equals('')">
				 		<if test="skList.size != 0 || pList!=null || schoolList!=null and !schoolList.equals('')">
						 or
						</if>
				 		user_name like '%'||#{keyword}||'%'
					</if>
                </if>
                order by user_name
	 	</select>
	 
	 
	 
	 	<select id="selectChatRoomList" parameterType="_int" resultMap="chatResultSet">
	 	
	 	select
		       c.chatroom_no
		      ,c.user_two
		      ,u.user_name
		      ,u.user_avatar
		      ,m.message_content
		      ,to_char(m.created_at, 'HH12:MIPM') "mcreated_at"
		
		from chatrooms c
		join messages m on (c.chatroom_no = m.chatroom_no)
		join users u on (c.user_two = u.user_no)
		
		where c.user_one = #{userNo}
		  and m.deliver_no = #{userNo}
		  and m.message_content = (
		                              select max(message_content)
		                              from messages
		                              where deliver_no = #{userNo} 
		                            )

	 	
	 	</select>
	 	
	 	<!-- 비밀번호 변경 -->
	 
	 <!-- 내가 작성한 post총 개수 -->
	 <select id="myPostCount" parameterType="_int" resultType="_int">
	    select count(*)
        from Posts 
        where user_no=#{userNo}
	 </select>

	<update id="updatePwd" parameterType="Member">
	 		update members 
	 		   set user_pwd = #{userPwd} 
	 		 where user_Email = #{userEmail}
	 		   and user_no = #{userNo}
	 		   and user_birth = #{userBirth}
	</update>
	 
	 <select id="profileMyPost" parameterType="_int" resultMap="postResultSet">
	         select P.POST_NO
             , POST_CONTENT
             , POST_IMAGE
             , to_char(P.created_at, 'YYYY-MM-DD') "created_date"
             , to_char(P.updated_at, 'YYYY-MM-DD') "updated_at"
             , u.user_no
             , USER_NAME
             , USER_POSI
             , USER_COMP
             , U.USER_AVATAR
             , C3.count as isLiked <!-- 해당게시물 좋아요 총 개수     -->
             , C4.POST_NO as isFollowing 
        from Posts P
                 left join USERS U on U.USER_NO = P.USER_NO
                 left join (select POST_NO, count(*) count from LIKES group by post_no) C3 on P.POST_NO = C3.POST_NO
                 left join (select POST_NO from LIKES where USER_NO = #{userNo}) C4 on P.POST_NO = C4.POST_NO
        where p.user_no=#{userNo}
        order by P.updated_at desc
	 </select>
	 <delete id="myPostDelete" parameterType="_int">
	 delete 
	 from posts 
	 where post_no=${postNo}
	 </delete>
	 	<select id="selectListCount" resultType="_int">
	 		 select
		            count(*)
		      from  likes
		      where user_no = #{uno}
	 		
	 	</select>
	 	
	 	<select id="selectLikePost" parameterType="_int" resultMap="postResultSet">
	 		  select  p.post_no
		            , p.post_content
		            , p.post_image
		            , p.user_no
		            , p.post_image
		            , u.user_avatar
		            , c.comp_name
		            , u.user_name
		       from posts p
		  left join likes l on p.post_no = l.post_no
		  left join users u on p.user_no = u.user_no
		  left join companys c on c.user_no = p.user_no
		      where l.user_no = #{uno}
	 	</select>
	 
	
	 
	 

</mapper>