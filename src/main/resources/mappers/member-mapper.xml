<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">
	<resultMap id="memberResultSet" type="Member">
		<result column="user_no" property="userNo"/>
		<result column="login_type" property="loginType"/>
		<result column="user_email" property="email"/>
		<result column="user_pwd" property="userPwd"/>
		<result column="user_name" property="userName"/>
		<result column="user_birth" property="userBirth"/>
		<result column="user_posi" property="userPosi"/>
		<result column="user_status" property="status"/>
		<result column="user_info" property="userInfo"/>
		<result column="user_edu" property="userEdu"/>
		<result column="user_avatar" property="userEdu"/>
		<result column="created_at" property="createdAt"/>
		<result column="updated_at" property="updatedAt"/>
		<result column="access_token" property="accessToken"/>
		<result column="certify_ques" property="certifyQues"/>
		<result column="certify_ans" property="certifyAns"/>
		<result column="email_auth" property="emailAuth"/>
	</resultMap>
	
	<resultMap id="bookmarkResultSet" type="Bookmark">
		<result column="user_no" property="userNo"/>
		<result column="recruit_no" property="recruitNo"/>
		<result column="recruit_title" property="recruitTitle"/>
		<result column="recruit_requ" property="recruitRequ"/>
		<result column="comp_name" property="compName"/>
		<result column="created_at" property="createdAt"/>
	</resultMap>
	
	<resultMap id="ComSubResultSet" type="CompSub">
		<result column="user_no" property="userNo"/>
		<result column="comp_no" property="compNo"/>
		<result column="comp_name" property="compName"/>
		<result column="comp_info" property="compInfo"/>
		<result column="comp_logo" property="compLogo"/>
		<result column="comp_birth" property="compBirth"/>
		<result column="comp_headcount" property="compHeadcount"/>
		<result column="created_at" property="createdAt"/>
	</resultMap>
	
	<select id="loginMember"
		    parameterType="Member"
		    resultMap="memberResultSet">
		select
			   user_no
			 , login_type
			 , user_email
			 , user_pwd
			 , user_name
			 , user_birth
			 , user_posi
			 , user_status
			 , user_info
			 , user_edu
			 , user_avatar
			 , created_at
			 , updated_at
			 , access_token
			 , certify_ques
			 , certify_ans
			 , email_auth
	      from users
	     where user_status != 1
           and user_email=#{email}
	</select>
	
	<insert id="insertMember"
			parameterType="Member">
		insert
			into users
			(
			   user_no
			 , login_type
			 , user_email
			 , user_pwd
			 , user_name
			 , user_birth
			 , user_posi
			 , user_status
			 , user_info
			 , user_edu
			 , user_avatar
			 , created_at
			 , updated_at
			 , access_token
			 , certify_ques
			 , certify_ans
			 , email_auth
			)
			values
			(
			   seq_user.nextval
			 , default <!-- local -->  
			 , #{email}
			 , #{userPwd}
			 , #{userName}
			 , #{userBirth}
			 , #{userPosi}
			 , #{status}
			 , #{userInfo}
			 , #{userEdu}
			 , #{userAvatar}
			 , sysdate
			 , sysdate
			 , #{accessToken}
			 , #{certifyQues}
			 , #{certifyAns}
			 , default
			)
	</insert>
	
	<!-- 이메일 인증용 키 세팅 -->
	<update id="setAuthKey" parameterType="Member">
		update users
		    set
		     email_auth = #{emailAuth}
		    where user_email=#{email}
		     and user_name=#{userName} <!-- 추후 userName이 아니라 userNo로 바꿔줘야 안정적 -->
	</update>
	
	<!-- 이메일 인증링크 클릭 시 인증여부 Y로 업데이트 -->
	<update id="confirmEmail" parameterType="Member">
		update users
			set
			 email_auth = 'Y'
			where user_email=#{email}
			 and email_auth=#{emailAuth}
	</update>
	
	<!-- 이메일 중복체크. 중복된 이메일 카운트 -->
	<select id="checkEmail" 
			parameterType="String"
			resultType="String">
		select
			  count(*)
		 from users
		 where user_email=#{email}
		   and login_type='local'
		   and user_status in(0,2)
	</select>
	
	<!-- 북마크 조회 -->
	<select id="selectBookmark" parameterType="_int" resultMap="bookmarkResultSet">
		select 
		b.user_no,
		recruit_no,
		to_char(r.created_at, 'YYYY-MM-DD') "created_at",
		r.recruit_title,
		r.recruit_requ,
		c.comp_name
		from bookmarks b
		left join recruits r using(recruit_no)
		left join companys c on(r.comp_no = c.comp_no)
		where b.user_no=#{uno}
		order by b.created_at
		
	</select>
	
	<delete id="deleteBookmark" parameterType="Bookmark">
		delete 
		from bookmarks 
		 where RECRUIT_NO=#{recruitNo} and
		 USER_NO=#{userNo}
	</delete>
	
	<select id="selectSubComp" parameterType="_int" resultMap="ComSubResultSet">
		select 
		cs.user_no,
		comp_no,
		comp_name,
		comp_info,
		comp_logo,
		substr(c.comp_birth,1,4) "COMP_BIRTH",
		cs.CREATED_AT,
		substr(COMP_HEADCOUNT,1,instr(COMP_HEADCOUNT,'명')-1) COMP_HEADCOUNT
		from comp_sub cs
		join companys c using(comp_no)
		where cs.user_no=#{uno}
		order by cs.created_at
	</select>
	<delete id="deleteSubComp" parameterType="CompSub">
		delete
		from comp_sub
		where comp_no=#{compNo} and
		user_no=#{userNo}
	</delete>
</mapper>