<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">
	<resultMap id="memberResultSet" type="Member">
		<result column="user_no" property="userNo"/>
		<result column="login_type" property="loginType"/>
		<result column="user_email" property="email"/>
		<result column="user_pwd" property="userPwd"/>
		<result column="user_name" property="userName"/>
		<result column="user_birth" property="userBirth"/>
		<result column="user_posi" property="userPosi"/>
		<result column="user_status" property="status"/>
		<result column="user_info" property="userInfo"/>
		<result column="user_edu" property="userEdu"/>
		<result column="user_avatar" property="userEdu"/>
		<result column="created_at" property="createdAt"/>
		<result column="updated_at" property="updatedAt"/>
		<result column="access_token" property="accessToken"/>
		<result column="certify_ques" property="certifyQues"/>
		<result column="certify_ans" property="certifyAns"/>
		<result column="email_auth" property="emailAuth"/>
		<result column="user_comp" property="userComp"/>
	</resultMap>
	
	<select id="loginMember"
		    parameterType="Member"
		    resultMap="memberResultSet">
		select
			   user_no
			 , login_type
			 , user_email
			 , user_pwd
			 , user_name
			 , user_birth
			 , user_posi
			 , user_status
			 , user_info
			 , user_edu
			 , user_avatar
			 , created_at
			 , updated_at
			 , access_token
			 , certify_ques
			 , certify_ans
			 , email_auth
			 , user_comp
	      from users
	     where user_status != 1
           and user_email=#{email}
	</select>
	
	<insert id="insertMember"
			parameterType="Member">
		insert
			into users
			(
			   user_no
			 , login_type
			 , user_email
			 , user_pwd
			 , user_name
			 , user_birth
			 , user_posi
			 , user_status
			 , user_info
			 , user_edu
			 , user_avatar
			 , created_at
			 , updated_at
			 , access_token
			 , certify_ques
			 , certify_ans
			 , email_auth
			)
			values
			(
			   seq_user.nextval
			 , default <!-- local -->  
			 , #{email}
			 , #{userPwd}
			 , #{userName}
			 , #{userBirth}
			 , #{userPosi}
			 , #{status}
			 , #{userInfo}
			 , #{userEdu}
			 , #{userAvatar}
			 , sysdate
			 , sysdate
			 , #{accessToken}
			 , #{certifyQues}
			 , #{certifyAns}
			 , default
			)
	</insert>
	
	<!-- 이메일 인증용 키 세팅 -->
	<update id="setAuthKey" parameterType="Member">
		update users
		    set
		     email_auth = #{emailAuth}
		    where user_email=#{email}
		     and user_name=#{userName} <!-- 추후 userName이 아니라 userNo로 바꿔줘야 안정적 -->
	</update>
	
	<!-- 이메일 인증링크 클릭 시 인증여부 Y로 업데이트 -->
	<update id="confirmEmail" parameterType="Member">
		update users
			set
			 email_auth = 'Y'
			where user_email=#{email}
			 and email_auth=#{emailAuth}
	</update>
	
	<!-- 이메일 중복체크. 중복된 이메일 카운트 -->
	<select id="checkEmail" 
			parameterType="String"
			resultType="String">
		select
			  count(*)
		 from users
		 where user_email=#{email}
		   and login_type='local'
		   and user_status in(0,2)
	</select>
	
	<!-- 프로필 인맥(팔로워, 팔로잉, 연결) 조회용 -->
	<!-- 팔로워(나를팔로우하는사람) -->
	<select id="selectFollowers"
			parameterType="_int"
			resultMap="memberResultSet">
			select *
				from users
				where user_no in(
					select follower_no
					from connections
					where following_no=#{userNo}
				)
				order by user_name
	</select>
	<select id="countFollowers"
			parameterType="_int"
			resultType="_int">
			select count(*)
				from users
				where user_no in(
					select follower_no
					from connections
					where following_no=#{userNo}
				)
	</select>
	<!-- 팔로잉(내가팔로우하는사람) -->
	<select id="selectFollowings"
			parameterType="_int"
			resultMap="memberResultSet">
			select *
				from users
				where user_no in(
					select following_no
					from connections
					where follower_no=#{userNo}
				)
				order by user_name
	</select>
	<select id="countFollowings"
			parameterType="_int"
			resultType="_int">
			select count(*)
				from users
				where user_no in(
					select following_no
					from connections
					where follower_no=#{userNo}
				)
	</select>
	<!-- 연결된사람(서로팔로우) -->
	<select id="selectConnections"
			parameterType="_int"
			resultMap="memberResultSet">
			select *
				from users
				where user_no in( <!--나를 팔로우건사람의 유저번호-->
					select 
							follower_no
						from connections
						where following_no=#{userNo}
				) and user_no in( <!--내가 팔로우건사람의 유저번호-->
			        select 
			        		following_no
						from connections
						where follower_no=#{userNo}
			    )
			    order by user_name
	</select>
	<select id="countConnections"
			parameterType="_int"
			resultType="_int">
			select count(*)
				from users
				where user_no in( <!--나를 팔로우건사람의 유저번호-->
					select 
							follower_no
						from connections
						where following_no=#{userNo}
				) and user_no in( <!--내가 팔로우건사람의 유저번호-->
			        select 
			        		following_no
						from connections
						where follower_no=#{userNo}
			    )
	</select>
	
</mapper>