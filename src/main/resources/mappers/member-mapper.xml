<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">
	<resultMap id="memberResultSet" type="Member">
		<result column="user_no" property="userNo"/>
		<result column="login_type" property="loginType"/>
		<result column="user_email" property="email"/>
		<result column="user_pwd" property="userPwd"/>
		<result column="user_name" property="userName"/>
		<result column="user_birth" property="userBirth"/>
		<result column="user_posi" property="userPosi"/>
		<result column="user_status" property="status"/>
		<result column="user_info" property="userInfo"/>
		<result column="user_edu" property="userEdu"/>
		<result column="user_avatar" property="userEdu"/>
		<result column="created_at" property="createdAt"/>
		<result column="updated_at" property="updatedAt"/>
		<result column="access_token" property="accessToken"/>
		<result column="certify_ques" property="certifyQues"/>
		<result column="certify_ans" property="certifyAns"/>
		<result column="email_auth" property="emailAuth"/>
	</resultMap>
	
	<resultMap id="skillResultSet" type="Skills">
		<result column="skill_no" property="skillNo"/>
		<result column="skill_name" property="skillName"/>
	</resultMap>
	
	
	<resultMap id="userFiledSet" type="UserFiled">
		<result column="user_no" property="userNo"/>
		<result column="skill_no" property="skillNo"/>
	</resultMap>
	
	
	
	<select id="loginMember"
		    parameterType="Member"
		    resultMap="memberResultSet">
		select
			   user_no
			 , login_type
			 , user_email
			 , user_pwd
			 , user_name
			 , user_birth
			 , user_posi
			 , user_status
			 , user_info
			 , user_edu
			 , user_avatar
			 , created_at
			 , updated_at
			 , access_token
			 , certify_ques
			 , certify_ans
			 , email_auth
	      from users
	     where user_status != 1

           		and user_email=#{email}
				
	</select>
	
	<insert id="insertMember"
			parameterType="Member">
		insert
			into users
			(
			   user_no
			 , login_type
			 , user_email
			 , user_pwd
			 , user_name
			 , user_birth
			 , user_posi
			 , user_status
			 , user_info
			 , user_edu
			 , user_avatar
			 , created_at
			 , updated_at
			 , access_token
			 , certify_ques
			 , certify_ans
			 , email_auth
			)
			values
			(
			   seq_user.nextval
			 , default <!-- local -->  
			 , #{email}
			 , #{userPwd}
			 , #{userName}
			 , #{userBirth}
			 , #{userPosi}
			 , #{status}
			 , #{userInfo}
			 , #{userEdu}
			 , #{userAvatar}
			 , sysdate
			 , sysdate
			 , #{accessToken}
			 , #{certifyQues}
			 , #{certifyAns}
			 , default
			)
	</insert>
	
	<!-- 이메일 인증용 키 세팅 -->
	<update id="setAuthKey" parameterType="Member">
		update users
		    set
		     email_auth = #{emailAuth}
		    where user_email=#{email}
		     and user_name=#{userName} <!-- 추후 userName이 아니라 userNo로 바꿔줘야 안정적 -->
	</update>
	
	<!-- 이메일 인증링크 클릭 시 인증여부 Y로 업데이트 -->
	<update id="confirmEmail" parameterType="Member">
		update users
			set
			 email_auth = 'Y'
			where user_email=#{email}
			 and email_auth=#{emailAuth}
	</update>
	
	<!-- 이메일 중복체크. 중복된 이메일 카운트 -->
	<select id="checkEmail" 
			parameterType="String"
			resultType="String">
		select
			  count(*)
		 from users
		 where user_email=#{email}
		   and login_type='local'
		   and user_status in(0,2)
	</select>
	
	<!-- 최종학력 조회 -->
	
	<select id="selectUserEdu" parameterType="_int"
			resultType="string">
		
		select
			   user_edu
		  from users
		 where user_no = #{userNo}
	</select>
	
	<update id="updateUserInfo" parameterType="Member">
		
		update
				users
		set user_info = #{userInfo}
		where user_no = #{userNo}

	</update>
	
	<update id="updateUserPosi" parameterType="Member">
		
		update
				users
		set user_posi = #{userPosi}
		where user_no = #{userNo}

	</update>
	
	
	<select id="checkSkill" parameterType="string" resultMap="skillResultSet">
	
		select
			   skill_no
			 , skill_name
		from skills
		where skill_name like '%' || #{skillName} || '%'
	
	
	</select>
	
	
	
	<!-- 최종학력 업데이트 -->
	<update id="updateUserEdu" parameterType="Member">
	
		update 
			   users
		   set user_edu = #{userEdu}
		 where user_no = #{userNo}
	</update>

	<select id="getSkillNo" parameterType="map" resultMap ="skillResultSet">
		
		
		select
			    skill_no
			  , skill_name
		from skills		  
		where skill_name in
		<foreach collection="array" item="arr" open="(" close=")" separator=",">
			#{arr}
		</foreach>

	</select>
	
	<update id="insertUserFiled">
			<!-- collection = 반복문 돌릴 list의 이름 item : list안에서 순차적으로 접근할 값 변수명-->
		 <foreach collection="skillsNo" item="no" open="insert all" close="SELECT * FROM DUAL">
			
			into user_fields
			(
				 user_no
			   , skill_no
			)
			values
			(
				 #{userNo}
				,#{no}
			)
			
		</foreach>
	
	
	</update>
	
	
	
	<select id="selectUserProfile" parameterType="_int" resultMap ="memberResultSet">
		
		select
			   user_no
			 , login_type
			 , user_email
			 , user_pwd
			 , user_name
			 , user_birth
			 , user_posi
			 , user_status
			 , user_info
			 , user_edu
			 , user_avatar
	      from users
	     where user_status != 1
         and user_no = #{userNo}
	

	</select>
	
	
		<select id="selectUserSkill" parameterType="_int" resultMap ="skillResultSet">
			
						select
							  skill_no
				             ,skill_name
					      from user_fields
				          join skills using(skill_no)
					     where user_no = #{userNo}


		</select>
		
		
		<delete id="deleteUserField" parameterType="UserFiled">
			delete
		  			
		  	   from user_fields
		      where user_no = #{userNo}
		        and skill_no = #{skillNo}
		
		</delete>
	
	
</mapper>