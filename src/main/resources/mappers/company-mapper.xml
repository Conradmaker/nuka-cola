<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="companymapper">

	<resultMap id="companyResultSet" type="Company">
		<result column="comp_no" property="compNo"/>
		<result column="comp_name" property="compName"/>
		<result column="comp_info" property="compInfo"/>
		<result column="comp_email" property="compEmail"/>
		<result column="comp_address" property="compAddress"/>
		<result column="comp_logo" property="compLogo"/>
		<result column="comp_headcount" property="headCount"/>
		<result column="comp_birth" property="compBirth"/>
		<result column="created_at" property="createdAt"/>
		<result column="updated_at" property="updatedAt"/>
		<result column="user_no" property="userNo"/>
		<result column="comp_pm" property="compPm"/>
		<result column="subscribed" property="subScribed"/>
		<result column="skill_name" property="skillName"/>
	</resultMap>
	
	<resultMap id="skillResultSet" type="Skills">
		<result column="skill_no" property="skillNo"/>
		<result column="skill_name" property="skillName"/>
	
	<!-- 회사채용공고 -->
	</resultMap>
		<resultMap id="RecruitResultSet" type="Recruit">
		<result column="recruit_no" property="recruitNo"/>
		<result column="recruit_title" property="recruitTitle"/>
		<result column="recruit_info" property="recruitInfo"/>
		<result column="recruit_state" property="recruitState"/>
		<result column="recruit_main" property="recruitMain"/>
		<result column="recruit_posi" property="recruitPosi"/>
		<result column="recruit_img" property="recruitImg"/>
		<result column="recruit_minsalary" property="recruitMinSal"/>
		<result column="recruit_maxsalary" property="recruitMaxSal"/>
		<result column="recruit_requ" property="recruitRequ"/>
		<result column="recruit_dl" property="recruitDl"/>
		<result column="recruit_count" property="recruitCount"/>
		<result column="comp_no" property="compNo"/>
		<result column="created_at" property="createdAt"/>
		<result column="comp_name" property="compName"/>
	</resultMap>
	
	<resultMap id="indusResultSet" type="Industries">
		<result column="comp_no" property="compNo"/>
		<result column="indus_no" property="indusNo"/>
		<result column="indus_name" property="indusName"/>
	</resultMap>
	
		<resultMap id="techResultSet" type="TechStack">
		<result column="comp_no" property="compNo"/>
		<result column="skill_no" property="skillNo"/>
		<result column="skill_name" property="skillName"/>
		<result column="stacks_posi" property="stackPosi"/>
		<result column="created_at" property="createdAt"/>
	</resultMap>
	
		
	
	<select id="selectListCount" resultType="_int">
		select
			   count(*)
		from   nukacola.companys
	</select>
	
	<!-- 회사정보조회 -->
	<select id="selectCompany"
			parameterType="_int"
			resultMap="companyResultSet">
		select
			   *
		  from companys
		  where comp_no=#{cno}
	</select>
	
	<!-- 회사 구성원 수 조회 -->
	<select id="selectMemberCount"
			parameterType="_int"
			resultType="_int">
		select 
		      count(*)
		  from careers
		 where comp_no=#{cno}
		   and career_state=0
	</select>

	
	
	<select id="selectCompanyList" resultMap="companyResultSet">
		select
                c.comp_no
		      , c.comp_info
		      , c.comp_name
		      , c.comp_address
              , u.user_no
		      , c.comp_logo
              , c2.comp_no as subScribed
		   from companys c
      left join users u on u.user_no = c.user_no
      left join (select comp_no from comp_sub where user_no = #{uno}) c2 on c.comp_no = c2.comp_no
		  order
		     by c.created_at desc
	</select>
	
	<insert id="insertCompany" parameterType="Company">
		insert
		into companys
			(
			  comp_no
			, comp_name
			, comp_info
			, comp_email
			, comp_address
			, comp_logo
			, comp_headcount
			, comp_birth
			, created_at
			, updated_at
			, user_no
			, comp_pm
			)
			values
			(
			   seq_comp.nextval
	         , #{compName}
	         , #{compInfo}
	         , #{compEmail}
	         , #{compAddress}
	         , #{compLogo}
	         , #{headCount}
	         , #{compBirth}
	         , default
	         , default
	         , #{userNo}
	         , #{userNo}
	        )
	</insert>
	
	<!--기술식별자 가져오기 -->
	<select id="checkSkill" parameterType="string" resultMap="skillResultSet">
		select
			   skill_no
			 , skill_name
		from skills
		where skill_name like '%' || #{skillName} || '%'
	</select>
	
	<!-- 회사번호 알아오기 -->
	<select id="selectCompanyNo" parameterType="string" resultMap="companyResultSet">
		select
				comp_no
		  from companys
		 where comp_name = #{compName}
	</select>
	
	<insert id="insertCompindus" parameterType="CompIndus">
   		 insert
   		  into compindus
   			 (
		   		comp_no
		   	  , indus_no
		   	 )
   			 values
   			 (
               #{compNo}
             , #{indusNo}
             )
	</insert>
	
	
	<update id="insertTech">
			<!-- collection = 반복문 돌릴 list의 이름 item : list안에서 순차적으로 접근할 값 변수명-->
		<foreach collection="skillsNo" item="no" open="insert all" close="SELECT * FROM DUAL">
			
			into tech_stacks
			(
			   comp_no
			 , skill_no
			 , stacks_posi
			 , created_at
			)
			values
			(
			   #{compNo}
			  ,#{no}
			  ,#{backNo}
			  ,default
			)
		
		</foreach>
	</update>
	
	<select id="selectPositionList"
			parameterType="_int"
			resultType="String">
		select distinct
			  career_posi
		  from careers
		 where comp_no=#{cno}
	</select>
	
	<!-- separator에 쉼표가 들어가버리면 문법 에러난다! -->
	<insert id="addMember"
			parameterType="java.util.List">
			  <foreach collection="list" item="career" open="insert all" close="select * from sys.dual" separator=" ">
	  		 into careers
			  values
			  (
				#{career.userNo},
				#{career.compNo},
				#{career.careerPosi},
				0,
				null,
				sysdate,
				sysdate
			  )
			</foreach>
	</insert>
	<!-- 회사 채용공고리스트 -->
	<!-- 진행중인 채용공고 총갯수 -->
	<select id="INGcount" parameterType="Company" resultType="_int">
	select count(*)
		from recruits
		where comp_no=#{compNo} and
		to_date(RECRUIT_DL,'MM/DD/YYYY')>=to_char(sysdate,'YYYY-MM-DD')
	</select>
	
	<!-- 진행중인 채용공고리스트 -->
	<select id="selectCompanyRecruitING" parameterType="Company"
	resultMap="RecruitResultSet" >
		select 
			RECRUIT_NO,
			RECRUIT_TITLE,
			RECRUIT_INFO,
			RECRUIT_STATE,
			RECRUIT_MAIN,
			RECURIT_POSI,
			RECRUIT_IMG,
			RECRUIT_MINSALARY,
			RECRUIT_MAXSALARY,
			RECRUIT_REQU,
			RECRUIT_DL,
			RECRUIT_COUNT,
			COMP_NO,
			to_char(r.CREATED_AT,'YYYY-MM-DD') CREATED_AT,
			c.comp_name
			from recruits r
			join companys c using(comp_no)
			where comp_no=#{compNo} and
			to_date(RECRUIT_DL,'MM/DD/YYYY')>=to_char(sysdate,'YYYY-MM-DD')
	</select>
	
	<!-- 진행완료인 채용공고 총갯수 -->
	<select id="ENDcount" parameterType="Company" resultType="_int">
	select count(*)
		from recruits
		where comp_no=#{compNo} and
		to_char(sysdate,'YYYY-MM-DD')>to_date(RECRUIT_DL,'MM/DD/YYYY')
	</select>
	
	<!-- 진행완료인 채용공고리스트 -->
	<select id="selectCompanyRecruitEND" parameterType="Company"
	resultMap="RecruitResultSet" >	
		select 
			RECRUIT_NO,
			RECRUIT_TITLE,
			RECRUIT_INFO,
			RECRUIT_STATE,
			RECRUIT_MAIN,
			RECURIT_POSI,
			RECRUIT_IMG,
			RECRUIT_MINSALARY,
			RECRUIT_MAXSALARY,
			RECRUIT_REQU,
			RECRUIT_DL,
			RECRUIT_COUNT,
			COMP_NO,
			to_char(r.CREATED_AT,'YYYY-MM-DD') CREATED_AT,
			c.comp_name
			from recruits r
			join companys c using(comp_no)
			where comp_no=#{compNo} and
			to_char(sysdate,'YYYY-MM-DD')>to_date(RECRUIT_DL,'MM/DD/YYYY')
	</select>
	
	<select id="CompanyRecruitSkills" parameterType="Company" resultMap="RecruitResultSet">
	select
		LISTAGG(skill_name,',')within group(order by skill_no) skillName, recruit_no
		from recruit_skills
		join skills using(skill_no)
		join recruits using(recruit_no)
		where comp_no=#{compNo}
		group by recruit_no
	</select>

	<update id="updateCompanyProfileInfo" parameterType="Company">
	
		update
		       companys
		   set comp_info = #{ compInfo }
		 where comp_no = #{compNo}     
	
	</update>
	
	
	<select id="selectCompanyIndus" parameterType="_int" resultMap="indusResultSet">
			select
			       indus_no
			     , indus_name
			  from industries i
			  left join compindus c using(indus_no)
			  where c.comp_no = #{cno}
	
	</select>
	
	
	<select id="countCompany" resultType="_int">
		select 
			   count(*)
	      from companys
		 where comp_name like '%'||#{keyword}||'%'
		 order
		    by created_at desc
	</select>
	
	<select id="rankingCompanyList" resultMap="companyResultSet">
		select rownum,a.*, c2.comp_no as subScribed
          from ( select a.*, 
                (select "num" from 
                ( select comp_no, count(*) "num" from comp_sub group by comp_no)
                where comp_no=a.comp_no) sub_count
                from companys a
                order by sub_count desc nulls last
                )a
      left join users u on u.user_no = a.user_no
      left join (select comp_no from comp_sub where user_no = #{uno}) c2 on a.comp_no = c2.comp_no 
	</select>
	
	
	<delete id="deleteCompanyIndus" parameterType="_int">
	
		delete
		from compindus
	    where comp_no = #{compNo}
	
	</delete>
	
	
	<update id="updateCompindus">
		
		<foreach collection="indusNums" item="no" open="insert all" close="select * from dual">
		
			into compindus
		    (
		      comp_no
		     ,indus_no
		      
		    )
		    values
		    (
		     #{compNo}
		    ,#{no}
		    )
		
		
		
		</foreach>
	
	
	
	</update>
	
	
	<update id="updateCompanyAddress" parameterType="Company">
		update
	          companys
	      set comp_address = #{compAddress}
	   where comp_no = #{compNo}

	</update>
	
	<delete id="deleteCompanySkill">
	
		delete
		from tech_stacks
	    where comp_no = #{compNo}
	
	
	</delete>
	
	
	<select id="selectTechList" parameterType="_int" resultMap="techResultSet">
	
		 	select
		            skill_name
		          , stacks_posi 
		          
		     from skills
		     join tech_stacks using(skill_no)
		     where comp_no = #{cno}
		     order by stacks_posi
			

	</select>
	
	<select  id="searchCompList" parameterType="map" resultMap="companyResultSet" >
		select  c.comp_no
		      , comp_info
		      , comp_name
		      , comp_address
		      , comp_logo
		   from companys c
      left join compindus p on (c.comp_no = p.comp_no)
          where c.comp_name like '%'||#{keyword}||'%' 
            and
        <foreach collection="hList" item="arr" open="(" close=")" separator="or">
			 c.comp_headcount like '%'||#{hList}||'%'
		</foreach>
		    and 
		 <foreach collection="lList" item="arr" open="(" close=")" separator="or">
			 c.comp_address like '%'||#{lList}||'%'
		</foreach> 
	</select>
	
	<select id="searchCompIndusList" parameterType="map" resultMap="companyResultSet">
		select  c.comp_no
		      , comp_info
		      , comp_name
		      , comp_address
		      , comp_logo
              , indus_name
		   from companys c
      left join compindus p on (c.comp_no = p.comp_no)
           join industries i on (p.indus_no = i.indus_no)
          where c.comp_name like '%'||#{keyword}||'%' 
            and
        <foreach collection="hList" item="arr" open="(" close=")" separator="or">
			 c.comp_headcount like '%'||#{hList}||'%'
		</foreach>
		    and 
		 <foreach collection="lList" item="arr" open="(" close=")" separator="or">
			 c.comp_address like '%'||#{lList}||'%'
		</foreach>
		    and
		<foreach collection="lList" item="arr" open="(" close=")" separator="or">
			 i.indus_name like '%'||#{lList}||'%'
		</foreach>  
	</select>
	
	
</mapper>